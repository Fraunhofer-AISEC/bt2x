/*
 * Rekor
 *
 * Rekor is a cryptographically secure, immutable transparency log for signed software releases.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[cfg(feature = "no_std")]
use alloc::string::String;
#[cfg(feature = "no_std")]
use alloc::vec::Vec;

use serde_with::serde_as;
use serde_with::hex::Hex;

#[serde_as]
#[derive(Clone, Debug, PartialEq, serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LogInfo {
    /// The current hash value stored at the root of the merkle tree
    #[serde_as(as = "Hex")]
    pub root_hash: [u8; 32],
    /// The current number of nodes in the merkle tree
    pub tree_size: u64,
    /// The current signed tree head
    pub signed_tree_head: String,
    /// The current treeID
    #[serde(rename = "treeID")]
    pub tree_id: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inactive_shards: Option<Vec<crate::models::InactiveShardLogInfo>>,
}

impl LogInfo {
    pub fn new(root_hash: [u8; 32], tree_size: u64, signed_tree_head: String, tree_id: String) -> LogInfo {
        LogInfo {
            root_hash,
            tree_size,
            signed_tree_head,
            tree_id,
            inactive_shards: Option::<_>::None,
        }
    }
}


